[["konsep-dasar-python.html", "Pertemuan 1 Konsep Dasar Python 1.1 Atribut &amp; Peralatan 1.2 Persiapan 1.3 Proses (Algoritma)", " Pertemuan 1 Konsep Dasar Python Untuk memulai mempelajari segala sesuatu perlu dilakukan dari hal yang sangat fundamental, begitu pula jika anda ingin belajar Python. Konsep dasar dan cara kerja Python, dapat dianalogikan sebagai proses memasak Roti serata bagaimana cara menyajiannya. Perhatikan gambar 1 berikut: Sejatinya koding yang dituliskan dalam bahasa pemrograman Python adalah suatu instruksi dari pengguna (user) kepada komputer untuk melakukan proses mengolah antara bahan, persiapan sampai dengan memasak dibutuhkan “kata” khusus, “simbol”, sehingga dikombinasikan sebagai sebuah “kalimat”. 1.1 Atribut &amp; Peralatan Setiap bahasa pemrograman memiliki atribut dan aturan penulisan yang berbeda-beda. Python memiliki beberapa aturan penulisan objek, variabel, statement, operator, hingga penulisan komentar. Jika terdapat penulisan yang tidak sesuai dengan aturan, maka program tidak akan berjalan atau error. Berikut ini adalah beberapa atribut dan struktur penulisan yang perlu diperhatikan pengguna Python. 1.1.1 Objek Apapun yang diimplementasikan di Python disebut sebagai sebuah objek. Object ini tentu akan memiliki beberapa tipe, misalnya nilai Integer atau Boolean. Berdasarkan tipe suatu objek tersebut, dapat menentukan proses apa yang bisa dilakukan dengan data yang dimiliki. Contoh; suatu nilai Integer dianggap sebagai objek yang dianalogikan dengan sebuah kotak transparan yang memiliki nilai 10. Catatan: Tipe object, menentukan apakah value yang ada di dalam kotak ini dapat diubah (mutable) atau konstan (immutable). 1.1.2 Variabel Variabel merupakan tempat penyimpanan sementara yang dapat digunakan untuk menyimpan data atau informasi. Variabel bersifat mutable, artinya nilai yang ada di dalam variabel dapat diubah, Nilai yang ada di dalam variabel pun dapat berupa bilangan maupun kata. Jadi, apabila suatu saat data tersebut ingin ditampilkan, kita hanya perlu memanggil variabel tersebut untuk menampilkan data yang tersimpan. Dengan kata lain variabel dapat dianggap seperti sebuah sticky note yang menempel di sebuah objek. 1.1.3 Statement Statement adalah instruksi atau kalimat perintah yang diberikan dalam beberapa baris untuk dieksekusi oleh komputer. Pada bahasa Python, jika kita ingin menuliskan beberapa statement dalam satu baris maka kita harus memisahkannya dengan titik-koma. Seperti contoh berikut: a = 10 ; b = 12; c = a+b; print(a,b,c) 1.1.4 Komentar Menambahkan/Memberikan komentar dalam skrip/koding Python adalah untuk memudahkan anda memahami arti/makna penggunaan suatu perintah/program. Komentar yang ditulis dalam sebuah program tersebut hanya bersifat penjelasan tentang apa yang dilakukannya atau apa yang seharusnya dilakukan oleh sebuah skrip/koding. Perlu dicatat bahwa komentar yang bersifat informasi tidak ada hubungannya dengan logika pemrogaram yang sedang anda gunakan. Mereka benar-benar diabaikan oleh kompiler dan dengan demikian tidak pernah tercermin pada input. Biasanya komentar dituliskan pada satu baris yang tersedia di Python, dengan menggunakan # di awal maupun di akhir pernyataan. # input suatu nilai ke variabel (contoh: komentar di awal script) a1 = 10 a_1 = 12 # input suatu nilai ke variabel (contoh: komentar di akhir script) 1a = 13 # contoh penulisan variabel yang salah Keterangan: Penulisan variabel dalam Python juga memiliki aturan tertentu, sebagai berikut. Karakter pertama harus berupa huruf atau garis bawah/underscore (_), artinya tidak boleh dimulai dengan angka. Karakter selanjutnya dapat berupa huruf, garis bawah/underscore (_) atau angka. Karakter pada nama variabel bersifat sensitif (case-sensitif). Artinya huruf kecil dan huruf besar dibedakan. Sebagai contoh, variabel nama dan Nama dianggap menjadi variabel yang berbeda. 1.2 Persiapan Dalam persiapan data, kita perlu mengetahui apa tipe data karena tiap tipe data memiliki perlakuan yang berbeda. Khususnya, jika Python tidak mendeteksi tipe data kita dengan benar, misalkan nomor telepon dalam bentuk Integer perlu dirubah menjadi Strings. 1.2.1 Tipe Data Berikut adalah tipe data yang umum di Python: Keterangan: List[] :- Kumpulan elemen dapat diubah (mutable). Tuple():- Kumpulan elemen tidak dapat diubah (immutable). Set{} :- Koleksi elemen unik (tidak memungkinkan pengulangan elemen) Selain pemahaman tipe data, memahami penggunaan operator Python adalah hal yang sangat penting untuk mempersiapkan pengolahan data. 1.2.2 Operator Operator merupakan simbol-simbol yang digunakan untuk melakukan operasi tertentu. Ada 4 jenis operator dalam pemrograman yang wajib diketahui: Operator Penugasan Seperti namanya, operator ini digunakan untuk memberikan tugas pada variabel. Selain menyimpan atau pengisian nilai, ada juga menjumlahkan, mengurangi, perkalian, pembagian, dsb. Selengkapnya bisa dilihat contoh berikut. a = 9 # Input suatu nilai ke variabel a += 8 # tambahkan dengan 8 a -= 7 # kurangi 7 a *= 6 # kali 6 a /= 5 # bagi dengan 5 a **=4 # pangkat 4 a Operator Aritmatika Opeartor aritmatika termasuk dalam operator yang paling sering digunakan dalam pemrograman. Berikut adalah contoh penggunaanya: a = 3 # Input suatu nilai ke variabel b = 6 # Input suatu nilai ke variabel a + b # Penjumlahan a - b # Pengurangan a * b # Perkalian a / b # Pembagian a // b # Pembagian bulat a % b # Sisa Bagi (modulo) a ** b # Pangkat Operator Pembanding Operator ini digunakan untuk membandingkan dua buah nilai. Operator ini juga dikenal dengan operator relasi dan sering digunakan untuk membuat sebuah logika atau kondisi. Perhatikan contoh berikut: a = 3 # Input suatu nilai ke variabel b = 6 # Input suatu nilai ke variabel a == b # apakah a sama dengan b? a &lt; b # apakah a lebih kecil dari b? a &gt; b # apakah a lebih besar dari b? a &lt;= b # apakah a lebih kecil sama dengan b? a &gt;= b # apakah a lebih besar sama dengan b? b? a != b # apakah a bukan b? Opeartor Logika a=True # Input suatu nilai ke variabel b=False # Input suatu nilai ke variabel not a # negasi a &amp; b # Logika AND a and b # Logika AND a | b # Logika OR a or b # Logika OR 1.3 Proses (Algoritma) Pada dasarnya, algoritma hanyalah serangkaian instruksi yang dirancang dengan menggunakan alur logis, disusun langkah demi langkah, yang berguna untuk menyelesaikan suatu masalah maupun dalam menyelesaikan tugas tertentu. Dalam komputasi, algoritma menyediakan komputer dengan panduan berturut-turut untuk menyelesaikan tindakan. Mereka terdiri dari daftar instruksi yang tepat yang menguraikan dengan tepat bagaimana menyelesaikan tugas. Untuk mempermudah pemahaman mengenai algoritma ini, maka berikut ini diberikan tiga contoh penerepan algoritma dalam kehidupan sehari-hari dan dilengkapi dengan flowchartnya. Dalam hal ini, misalkan anda ingin memasak telur, ada beberapa variasi dan langkah yang bisa dilakukan: Siapkan telur yang akan dimasak Tentukan telurnya akan dimasak seperti apa Jika ingin memasak orak-arik, maka: Pecahkan telurnya ke dalam wadah Kocok telur dan tambahkan bumbu sesuai selera Panaskan penggorengan Masukkan kocokan telur ke penggorengan yang sudah panas Aduk telur sampai menjadi orak-arik Jika ingin memasak ceplok, maka: Panaskan penggorengan yang sudah diisi minyak Pecahkan telur di penggorengan dan tunggu sampai matang Jika ingin memasak telur rebus, maka: Didihkan air dalam panci Masukkan telur utuh ke dalamnya dan tunggu beberapa menit sampai isinya matang sesuai selera Siap untuk dimakan Catatan: Jika anda ingin belajar lebih lanjut mengenai prosedur membuat flowchart silahkan klik disini. 1.3.1 Struktur Percabangan If Percabangan If digunakan saat terdapat satu pilihan keputusan. Contoh, Jika peserta pelatihan tidak lulus dalam ujian, maka kita harus ikut remidi. Sedangkan yang lulus dapat sertifikat. Dalam hal ini digunakan operator relasi sama dengan (==) untuk membandingkan isi variabel lulus. Sedangkan tanda titik-dua (:) adalah tanda untuk memulai blok kode If. Perlu dicatat bahwa: Penulisan blok If, harus diberikan indentasi tab atau spasi 2x. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
