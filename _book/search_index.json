[["konsep-dasar-python.html", "Pertemuan 1 Konsep Dasar Python 1.1 Atribut (Bahan-bahan) 1.2 Operator 1.3 Tipe Data 1.4 Bantuan", " Pertemuan 1 Konsep Dasar Python Untuk memulai mempelajari segala sesuatu perlu dilakukan dari hal yang sangat fundamental, begitu pula jika anda ingin belajar Python. Konsep dasar dan cara kerja Python, dapat dianalogikan sebagai proses memasak Roti serata bagaimana cara menyajiannya. Perhatikan gambar berikut: Sejatinya koding yang dituliskan dalam bahasa pemrograman Python adalah suatu instruksi dari pengguna (user) kepada komputer untuk melakukan proses mengolah antara bahan, persiapan sampai dengan memasak dibutuhkan “kata” khusus, “simbol”, sehingga dikombinasikan sebagai sebuah “kalimat”. 1.1 Atribut (Bahan-bahan) Setiap bahasa pemrograman memiliki atribut dan aturan penulisan yang berbeda-beda. Python memiliki beberapa aturan penulisan objek, variabel, statement, operator, hingga penulisan komentar. Jika terdapat penulisan yang tidak sesuai dengan aturan, maka program tidak akan berjalan atau error. Berikut ini adalah beberapa atribut dan struktur penulisan yang perlu diperhatikan pengguna Python. 1.1.1 Objek Apapun yang diimplementasikan di Python disebut sebagai sebuah objek. Object ini tentu akan memiliki beberapa tipe, misalnya nilai Integer atau Boolean. Berdasarkan tipe suatu objek tersebut, dapat menentukan proses apa yang bisa dilakukan dengan data yang dimiliki. Contoh; suatu nilai Integer dianggap sebagai objek yang dianalogikan dengan sebuah kotak transparan yang memiliki nilai 10. Catatan: Tipe object, menentukan apakah value yang ada di dalam kotak ini dapat diubah (mutable) atau konstan (immutable). 1.1.2 Variabel Variabel merupakan tempat penyimpanan sementara yang dapat digunakan untuk menyimpan data atau informasi. Variabel bersifat mutable, artinya nilai yang ada di dalam variabel dapat diubah, Nilai yang ada di dalam variabel pun dapat berupa bilangan maupun kata. Jadi, apabila suatu saat data tersebut ingin ditampilkan, kita hanya perlu memanggil variabel tersebut untuk menampilkan data yang tersimpan. Dengan kata lain variabel dapat dianggap seperti sebuah sticky note yang menempel di sebuah objek. 1.1.3 Komentar Menambahkan/Memberikan komentar dalam skrip/koding Python adalah untuk memudahkan anda memahami arti/makna penggunaan suatu perintah/program. Komentar yang ditulis dalam sebuah program tersebut hanya bersifat penjelasan tentang apa yang dilakukannya atau apa yang seharusnya dilakukan oleh sebuah skrip/koding. Perlu dicatat bahwa komentar yang bersifat informasi tidak ada hubungannya dengan logika pemrogaram yang sedang anda gunakan. Mereka benar-benar diabaikan oleh kompiler dan dengan demikian tidak pernah tercermin pada input. Biasanya komentar dituliskan pada satu baris yang tersedia di Python, dengan menggunakan # di awal maupun di akhir pernyataan. # input suatu nilai ke variabel `x1` (contoh: komentar di awal script) x1 = 10 x_1 = 12 # input suatu nilai ke variabel `x_1` (contoh: komentar di akhir script) 1x = 13 # contoh penulisan variabel yang salah Catatan: Penulisan variabel dalam Python juga memiliki aturan tertentu, sebagai berikut. Karakter pertama harus berupa huruf atau garis bawah/underscore (_), artinya tidak boleh dimulai dengan angka. Karakter selanjutnya dapat berupa huruf, garis bawah/underscore (_) atau angka. Karakter pada nama variabel bersifat sensitif (case-sensitif). Artinya huruf kecil dan huruf besar dibedakan. Sebagai contoh, variabel nama dan Nama dianggap menjadi variabel yang berbeda. 1.1.4 Statement Statement adalah instruksi atau kalimat perintah yang diberikan dalam beberapa baris untuk dieksekusi oleh komputer. Pada bahasa Python, jika kita ingin menuliskan beberapa statement dalam satu baris maka kita harus memisahkannya dengan titik-koma. Seperti contoh berikut: x = 2; y = 3; z = x+y; print(x,y,z) ## 2 3 5 https://medium.com/analytics-vidhya/data-types-in-python-506009234f89 Selain menyimpan atau pengisian nilai, ada juga menjumlahkan, mengurangi, perkalian, pembagian, dsb. Operator Simbol Penjumlahan += Pengurangan -= Perkalian *= Pembagian /= Sisa Bagi %= Pemangkatan **= Perhatikan contoh berikut: x += 2 print(x) ## 4 1.2 Operator Operator adalah simbol yang mengarahkan compiler untuk melakukan berbagai macam operasi terhadap beberapa penugasan. Operator mensimulasikan berbagai operasi matematis, logika, dan keputusan yang dilakukan pada sekumpulan Bilangan Kompleks, Integer, dan Numerik sebagai penugasan masukan (input). R dan Python mendukung sebagian besar empat jenis operator biner antara satu set penugasan. Dalam ini, kita akan melihat berbagai jenis operator yang tersedia di R dan Python dan penggunaannya. 1.2.1 Aritmatika Penggunaan operator aritmatika dalam program R dan Python adalah untuk mensimulasikan berbagai operasi matematika, seperti penambahan, pengurangan, perkalian, pembagian, dan modulo. Operator aritmatika yang dilakukan bisa saja berupa nilai skalar, bilangan kompleks, atau vektor. Operator Python Penjumlahan + Pengurangan - Perkalian * Divisi/Pembagian / Pemangkatan ** Modulo % Untuk pemahaman lebih lanjut, perhatikan cuplikan Python berikut: Catatan: Terlebih dahulu install numpy di Anaconda Navgator anda dengan cara membuka lingkungan (environment) py38 yang sudah anda buatkan sebelumnya. import numpy as np # fungsi untuk operasi pada Array x = np.array([2,3,5]) # memuat vektor x y = np.array([2,4,6]) # memuat vektor y x+y # hasil penjumahan vektor x dan y ## array([ 4, 7, 11]) print (x+y) # hasil penjumahan vektor x dan y ## [ 4 7 11] print (x-y) # hasil pengurangan vektor x dan y ## [ 0 -1 -1] print (x*y) # hasil perkalian vektor x dan y ## [ 4 12 30] print (x/y) # hasil pembagian vektor x dan y ## [1. 0.75 0.83333333] print (x**y) # hasil pemangkatan vektor x dan y ## [ 4 81 15625] print (x%y) # hasil modulo (Sisa bagi) vektor x dan y ## [0 3 5] Adakalanya anda perlu menampilkan keterangan/komentar yang juga melekat pada hasil perhitungan Python itu sendiri. Maka anda dapat melakukannya dengan cara berikut: print(&quot;Penjumahan vektor x dan y :&quot;, x + y, &quot;\\n&quot;) ## Penjumahan vektor x dan y : [ 4 7 11] print(&quot;Pengurangan vektor x dan y :&quot;, x - y, &quot;\\n&quot;) ## Pengurangan vektor x dan y : [ 0 -1 -1] print(&quot;Perkalian vektor x dan y :&quot;, x * y, &quot;\\n&quot;) ## Perkalian vektor x dan y : [ 4 12 30] print(&quot;Pembagian vektor x dan y :&quot;, x / y, &quot;\\n&quot;) ## Pembagian vektor x dan y : [1. 0.75 0.83333333] print(&quot;Pemangkatan vektor x dan y :&quot;, x ** y) ## Pemangkatan vektor x dan y : [ 4 81 15625] print(&quot;Modulo vektor x dan y :&quot;, x % y, &quot;\\n&quot;) ## Modulo vektor x dan y : [0 3 5] Catatan: Penjelasan lebih lekap mengenai modulo dapat lihat pada link ini 1.2.2 Relasional Operator relasional melakukan operasi perbandingan antara elemen yang bersesuaian pada setiap operan. Mengembalikan nilai Boolean TRUE jika operan pertama memenuhi relasi dibandingkan dengan operan kedua. Nilai TRUE selalu dianggap lebih besar dari FALSE. Operator Python Keterangan Kurang dari &lt; Mengembalikan TRUE jika elemen yang bersesuaian pada operan pertama lebih kecil dari operan kedua. Selain itu akan mengembalikan FALSE Kurang dari sama dengan &lt;= Mengembalikan TRUE jika elemen yang bersesuaian pada operan pertama kurang dari atau sama dengan elemen operan kedua. Selain itu akan mengembalikan FALSE Lebih besar dari &gt; Mengembalikan TRUE jika elemen yang bersesuaian pada operan pertama lebih besar dari operan kedua. Selain itu akan mengembalikan FALSE Lebih besar dari sama dengan &gt;= Mengembalikan BENAR jika elemen yang bersesuaian pada operan pertama lebih besar atau sama dengan dari operan kedua. Selain itu akan mengembalikan FALSE Sama Dengan == Mengembalikan BENAR jika dan hanya jika kedua sisi bernilai sama Tidak Sama dengan != Mengembalikan BENAR jika elemen yang bersesuaian pada operan pertama tidak sama dengan dari operan kedua import numpy as np # fungsi untuk operasi pada Array x = np.array([2,3,5]) # memuat vektor x y = np.array([2,4,6]) # memuat vektor y print(&quot;Vektor x kurang dari Vektor y:&quot;, x &lt; y, &quot;\\n&quot;) ## Vektor x kurang dari Vektor y: [False True True] print(&quot;Vector x kurang dari sama dengan Vector y:&quot;, x &lt;= y, &quot;\\n&quot;) ## Vector x kurang dari sama dengan Vector y: [ True True True] print(&quot;Vector x lebih besar dari Vector y :&quot;, x &gt; y, &quot;\\n&quot;) ## Vector x lebih besar dari Vector y : [False False False] print(&quot;Vector x lebih besar dari sama dengan Vector y :&quot;, x &gt;= y, &quot;\\n&quot;) ## Vector x lebih besar dari sama dengan Vector y : [ True False False] print(&quot;Vector x sama dengan Vector y:&quot;, x == y,&quot;\\n&quot;) ## Vector x sama dengan Vector y: [ True False False] print(&quot;Vector x tidak sama dengan Vector y:&quot;, x != y) ## Vector x tidak sama dengan Vector y: [False True True] 1.2.3 Logika Operator logis mensimulasikan operasi keputusan, berdasarkan operator yang ditentukan antara operan, yang kemudian dievaluasi ke nilai Boolean Benar atau Salah. Nilai bilangan bulat bukan nol dianggap sebagai nilai BENAR, baik itu bilangan kompleks atau bilangan real. Operator Python Keterangan NOT ! Operasi negasi/kebalikan pada status elemen operan AND &amp; Mengembalikan TRUE jika kedua operan bernilai Benar OR \\(|\\) Mengembalikan TRUE jika salah satu operan adalah Benar XOR ^ Mengembalikan TRUE jika salah satu dari kedua elemen pertama operan bernilai Benar import numpy as np # fungsi untuk operasi pada Array x = np.array([False,True,False]) # memuat vektor x y = np.array([True,True,False]) # memuat vektor y # Melakukan operasi logika pada Operan print(&quot;Logika Negasi (~) untuk vektor x:&quot;, ~x, &quot;\\n&quot;) ## Logika Negasi (~) untuk vektor x: [ True False True] print(&quot;Logika Negasi (~) untuk vektor y :&quot;, ~y, &quot;\\n&quot;) ## Logika Negasi (~) untuk vektor y : [False False True] print(&quot;Logika Konjungsi (Dan) :&quot;, x &amp; y, &quot;\\n&quot;) ## Logika Konjungsi (Dan) : [False True False] print(&quot;Logika Disjungsi (Atau) :&quot;, x | y, &quot;\\n&quot;) ## Logika Disjungsi (Atau) : [ True True False] print(&quot;Logika Disjungsi Parsial :&quot;, x ^ y) ## Logika Disjungsi Parsial : [ True False False] Catatan: Dalam Python, hanya menggunakan True dan False bukan dalam hurup Kapital. 1.2.4 Lain-lain Berikut ini juga ada beberapa operator yang kemungkinan besar juga akan anda perlukan pada saat akan menggunakan Python. import numpy as np # library untuk memuat vektor (array) x = 2 # memuat vektor x y = 3 # memuat vektor y from math import log,exp,sqrt # mengambil beberapa fungsi dari library `math` sqrt(x*y) # Bentuk akar ## 2.449489742783178 log(x) # logaritma ## 0.6931471805599453 exp(y) # eksponen ## 20.085536923187668 (x/y) + y # Tanda kurung ## 3.6666666666666665 import numpy as np # library untuk memuat vektor (array) x = np.array([2,3,5]) # memuat vektor x y = np.array([2,4,6]) # memuat vektor y np.sqrt(x*y) # Bentuk akar ## array([2. , 3.46410162, 5.47722558]) np.log(x) # logaritma ## array([0.69314718, 1.09861229, 1.60943791]) np.exp(y) # eksponen ## array([ 7.3890561 , 54.59815003, 403.42879349]) (x/y) + y # Tanda kurung ## array([3. , 4.75 , 6.83333333]) Catatan: Sifat Komutatif Asosiatif dan Distributif juga berlaku dalam program Python. 1.3 Tipe Data Dalam pemrograman seperti Python, tipe data merupakan konsep penting. Keduanya dapat menggunakan variabel untuk menyimpan tipe yang berbeda-beda, berikut adalah tipe data paling mendasar yang harus diketahui: Tipe Data Python Penjelasan Double/Float 5.6 Bilangan yang mempunyai koma Integer 5 Bilangan bulat 1,2,…,n Bolean/Logical True/False Benar bernilai 1 dan Salah bernilai 0 String/Character ‘Dsciencelabs’ karakter/kalimat bisa berupa huruf angka, dll (diapit tanda ” atau ’) Complex 1 + 5j Pasangan angka real dan imajiner Berikut ini adalah koding Python yang dapat digunakan untuk menetapkan kelima tipe data diatas: d1 = 5.6 # Tetapkan nilai desimal d2 = 5 # tetapkan nilai integer d3 = [True,False] # list Bolean/Logical d4 = [&quot;a&quot;,&#39;b&#39;,&#39;123&#39;] # list String/Character d5 = 1 + 5j # Complex Untuk memeriksa tipe data dalam Python: type(d5) # cetak tipe data ## &lt;class &#39;complex&#39;&gt; 1.4 Bantuan Salah satu bagian terpenting dalam bekerja dengan bahasa Python adalah mengetahui di mana mencari bantuan. help(print) ## Help on built-in function print in module builtins: ## ## print(...) ## print(value, ..., sep=&#39; &#39;, end=&#39;\\n&#39;, file=sys.stdout, flush=False) ## ## Prints the values to a stream, or to sys.stdout by default. ## Optional keyword arguments: ## file: a file-like object (stream); defaults to the current sys.stdout. ## sep: string inserted between values, default a space. ## end: string appended after the last value, default a newline. ## flush: whether to forcibly flush the stream. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
