[["visualisasi-data.html", "Pertemuan 3 Visualisasi Data 3.1 Import Data 3.2 Verifikasi Kelengkapan Data 3.3 Perbaharui Data 3.4 Statistik Dasar 3.5 Tabel Pivot 3.6 Pie-Chart", " Pertemuan 3 Visualisasi Data Visualisasi data adalah proses mempresentasikan data terstruktur maupun tidak terstruktur melalui grafik untuk mengkomunikasikan informasi secara lebih efisien dan mudah dimengerti. Pada bagian ini, diasumsikan anda sudah melakukan persiapan data dan impor data sebelum divisualisasikan. Langkah selanjutnya, adalah mengetahui informasi dasar mengenai dataset: 3.1 Import Data import pandas as pd # library yang dibutuhakan data = pd.read_excel(&#39;data/all_data.xlsx&#39;) # import data data.info() # informasi dasar mengenai dataset ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 58058 entries, 0 to 58057 ## Data columns (total 13 columns): ## # Column Non-Null Count Dtype ## --- ------ -------------- ----- ## 0 PERIODE 58058 non-null datetime64[ns] ## 1 REGION 58058 non-null object ## 2 BRANCH_ID 58058 non-null object ## 3 BRANCH_NAME 58058 non-null object ## 4 SERVICES_CODE 58058 non-null object ## 5 ZONE_DESTINATION 57702 non-null object ## 6 JUMLAH_AWB 58058 non-null int64 ## 7 JUMLAH_WEIGHT 58050 non-null float64 ## 8 JUMLAH_CASH 58058 non-null float64 ## 9 JUMLAH_CREDIT 58058 non-null float64 ## 10 JUMLAH_COD 58058 non-null float64 ## 11 JUMLAH_EPAY 58058 non-null float64 ## 12 TOTAL_OMZET 58058 non-null float64 ## dtypes: datetime64[ns](1), float64(6), int64(1), object(5) ## memory usage: 5.8+ MB Berikut ini adalah deskripsi dataset yang sedang digunakan: PERIODE = Transaksi Bulanan REGION = Regional BRANCH_ID = Nomor ID Cabang BRANCH_NAME = Nama Cabang SERVICES_CODE = Code Produk ZONE_DESTINATION = Tujuan Pengiriman JUMLAH_AWB = Jumlah Resi Pengiriman JUMLAH_WEIGHT = Berat Barang yang dikirimkan JUMLAH_CASH = Pembayaran Tunai JUMLAH_CREDIT = Pembayaran Kredit JUMLAH_COD = Pembayaran di tempat JUMLAH_EPAY = Pembayaran Online TOTAL_OMZET = Total Omset 3.2 Verifikasi Kelengkapan Data Dataset terkadang memuat data yang hilang, bisa saja karena tidak dikumpulkan atau tidak pernah ada. Sehingga, untuk melakukan analisa perlu dilakukan pemeriksaan kelengkapan data terlebih dahulu. Berikut ini diperlihatkan cara untuk mengekstrak baris yang berisi setidaknya satu nilai yang hilang: data[data.isnull().any(axis=1)] # bisa gunakan `isnull()` atau `isna()` ## PERIODE REGION ... JUMLAH_EPAY TOTAL_OMZET ## 92 2020-01-01 JAWA BARAT ... 0.0 16250.0 ## 126 2020-01-01 SERBODETABEK ... 0.0 17500.0 ## 133 2020-01-01 SERBODETABEK ... 0.0 10000.0 ## 138 2020-01-01 SERBODETABEK ... 0.0 157250.0 ## 186 2020-01-01 SERBODETABEK ... 0.0 45000.0 ## ... ... ... ... ... ... ## 56288 2022-07-01 JAKARTA ... 0.0 0.0 ## 56296 2022-07-01 JAKARTA ... 0.0 40000.0 ## 56329 2022-07-01 JAKARTA ... 0.0 36600.0 ## 57833 2022-07-01 SERBODETABEK ... 0.0 0.0 ## 58050 2022-07-01 SULAWESI - PAPUA ... 0.0 11000.0 ## ## [364 rows x 13 columns] data.isna().sum() # menghitung data yang hilang disetiap kolom ## PERIODE 0 ## REGION 0 ## BRANCH_ID 0 ## BRANCH_NAME 0 ## SERVICES_CODE 0 ## ZONE_DESTINATION 356 ## JUMLAH_AWB 0 ## JUMLAH_WEIGHT 8 ## JUMLAH_CASH 0 ## JUMLAH_CREDIT 0 ## JUMLAH_COD 0 ## JUMLAH_EPAY 0 ## TOTAL_OMZET 0 ## dtype: int64 3.3 Perbaharui Data Ada banyak langkah yang dapat dilakukan untuk mengisi data yang hilang denga Python, berikut ini adalah cara yang paling sering digunakan: edh1=data.fillna({&quot;ZONE_DESTINATION&quot;:&#39;A&#39;}) # ganti data hilang pada spesifik kolom edh2=data.fillna(method=&quot;ffill&quot;) # ganti data hilang dgn baris sebelumnya edh3=data.fillna(method=&quot;bfill&quot;) # ganti data hilang dgn baris setelahya edh4=data.fillna(0) # ganti data hilang dng 0 edh5=data.dropna() # hapus data hilang Selain cara diatas, berikut ini juga dapat digunakan untuk mengisi maupun memperbaharui data yang hilang: edh6=data.fillna(data.mode().iloc[0]) # data data hilang dengan median() dan mean() Catatan: Apabila data yang hilang berhubungan dengan time series analisis atau regresi makan akan digunakan pembaharuan data dengan interpolasi (bagian ini akan dibahas pada visualisasi data (line chart)) 3.4 Statistik Dasar Selanjutnya, mengetahui informasi statistik dasar mengenai data tersebut. Dapat dilakukan dengan script berikut: data.describe() # informasi statistik dasar (data numerik saja) ## JUMLAH_AWB JUMLAH_WEIGHT ... JUMLAH_EPAY TOTAL_OMZET ## count 5.805800e+04 5.805000e+04 ... 5.805800e+04 5.805800e+04 ## mean 4.998531e+03 9.032599e+03 ... 7.460462e+05 1.094231e+08 ## std 4.628010e+04 6.281230e+04 ... 5.057219e+06 9.328349e+08 ## min 1.000000e+00 -3.089790e+02 ... 0.000000e+00 -6.750000e+05 ## 25% 5.000000e+00 1.190000e+01 ... 0.000000e+00 1.402500e+05 ## 50% 5.600000e+01 1.563645e+02 ... 0.000000e+00 2.003075e+06 ## 75% 8.240000e+02 2.040400e+03 ... 1.020000e+05 2.605744e+07 ## max 2.334538e+06 2.726263e+06 ... 2.788892e+08 5.511628e+10 ## ## [8 rows x 7 columns] Hasil statistik dasar diatas, hanya memperlihatkan data numerik saja. Lalu bagaimana dengan data kategori yang ada pada dataset tersebut? Gunakan script sebagai berikut: # untuk memilih data kategori digunakan include=&#39;object&#39; dan sebaliknya gunakan include=&#39;number&#39; kategori = data.select_dtypes(include=&#39;object&#39;) kategori.describe().transpose() ## count unique top freq ## REGION 58058 8 SUMATERA 12162 ## BRANCH_ID 58058 62 CB0001 1674 ## BRANCH_NAME 58058 62 HO JAKARTA 1674 ## SERVICES_CODE 58058 141 REG19 7658 ## ZONE_DESTINATION 57702 4 A 22426 3.5 Tabel Pivot Saat melakukan analisis dengan menggunakan fungsi describe()seperti yang kita lakukan diatas, terkadang tidak menjawab informasi yang kita inginkan. Karena semua deskripsi tersebut diperhitungkan berdasarkan kolom dari masing-masing variabel pada dataset. Olehkarena itu, jika anda ingin mengetahui deskriptif statistik berdasarkan indeks tertentu makan anda perlu menggunakan Tabel Pivot. Analisis statistik deskriptif tersebut akan diperlihatkan dengan fungsi agregasi aggfunc yang ada di Python, yaitu: sum : yang digunakan untuk pejumlahan nilai pada indeks variabel yang sama. mean : ~ nilai rata-rata ~ min : ~ nilai minumum ~ max : ~ nilai maksimum ~ count : frekuensi Untuk mengetahui jumlah total pengiriman dan total omset yang diperoleh JNE berdasarkan regionalnya, dapat diperlihatkan dengan script berikut: # Tabel Pivot untuk menghitung jumlah omzet berdasarkan Region import numpy as np df=pd.pivot_table(data,index=[&#39;REGION&#39;], values=[&#39;TOTAL_OMZET&#39;,&#39;JUMLAH_WEIGHT&#39;], aggfunc=&#39;sum&#39;) # Komfersi indeks menjadi Kolom df.reset_index(inplace=True) # Urutkan data dari yang besar ke kecil df=df.sort_values([&#39;TOTAL_OMZET&#39;,&#39;JUMLAH_WEIGHT&#39;],ascending=True) print(df) ## REGION JUMLAH_WEIGHT TOTAL_OMZET ## 6 SULAWESI - PAPUA 4.372067e+06 1.002611e+11 ## 4 KALIMANTAN 5.974869e+06 1.133644e+11 ## 7 SUMATERA 2.612388e+07 4.476565e+11 ## 2 JAWA TENGAH 4.023259e+07 5.125633e+11 ## 3 JTBNN 5.923732e+07 6.850194e+11 ## 1 JAWA BARAT 7.075496e+07 8.552371e+11 ## 5 SERBODETABEK 1.261771e+08 1.224991e+12 ## 0 JAKARTA 1.914696e+08 2.413794e+12 Hasil dari Tabel Pivot diatas dapat diperlihatkan secara visual, perhatikan tabel berikut: # impor library yg dibutuhkan untuk visualisasi import plotly.graph_objects as go # Menampilkan Hasil Tabel Pivot fig = go.Figure(data = [go.Table( header = dict(values = list(df.columns), fill_color = &#39;paleturquoise&#39;, align = &#39;left&#39;), cells = dict(values = df.transpose().values.tolist(), fill_color = &#39;lavender&#39;, align = &#39;left&#39;))]) fig.show() Catatan: Tabel Pivot dan visualisasi tabel diatas memang sangat membantu untuk menganalisis data. Tetapi dalam banyak kondisi, terdapat berbagai jenis visual (grafik) lainnya yang lebih efektif dan lebih interaktif untuk menjelaskan suatu informasi yang kita butuhkan. 3.6 Pie-Chart Diagram lingkaran (Pie-Chart) adalah jenis grafik yang menyajikan sebuah nilai atau data dalam bentuk lingkaran. Diagram lingkaran memudahkan kita untuk mengetahui perbandingan suatu data terhadap keseluruhan data. Untuk membandingkan data satu dengan yang lainnya, maka sebuah lingkaran akan dibagi menjadi beberapa ruas lingkaran. Pada umunya, penyajian data pada diagram lingkaran disajikan dalam bentuk derajat (°) dan persen (%). Jika data yang disajikan dalam bentuk derajat, maka ukuran satu lingkaran penuh besarnya adalah 360°. Sedangkan jika suatu data disajikan dalam persen, maka satu lingkaran penuh nilainya adalah 100%. Rumus yang digunakan adalah sebagai berikut: Nilai yang ditanyakan (°) = (Besar sudut / 360°) x Total data Nilai yang ditanyakan (%) = (Nilai persen yang ditanyakan / 100%) x Total nilai Berikut ini deperlihatkan grafik lingkaran untuk memperlihatkan Total Omset yang diperoleh JNE berdasarkan regionalnya. import plotly.express as px # Tabel Pivot untuk menghitung jumlah omzet berdasarkan Region df=pd.pivot_table(data,index=[&#39;REGION&#39;], values=&#39;TOTAL_OMZET&#39;, aggfunc=&#39;sum&#39;) # Komfersi indeks menjadi Kolom df.reset_index(inplace=True) # Konversi Total omset menjadi per-miliar df[&quot;TOTAL_OMZET&quot;] = (df[&#39;TOTAL_OMZET&#39;]/1000000000) # membuat grafik lingkaran (pie-chart) fig = px.pie(df, values=&#39;TOTAL_OMZET&#39;, names=&#39;REGION&#39;, hole=0.5, title=&#39;Total Omset Berdasarkan Regional Per-miliar Rupiah&#39;, hover_data=[&#39;REGION&#39;], labels={&#39;REGION&#39;:&#39;Omset Regional&#39;}) fig.update_traces(textposition=&#39;inside&#39;, textinfo=&#39;percent+label&#39;) # fig.show() Pada sesi ini digunakan paket open source yang sangat banyak digunakan dalam proses data analitics, yaitu Plotly. Paket Plotly adalah program yang untuk visualisasi data interaktif yang dapat digunakan di Python, R, Julia, Javascript, ggplot2, F#, MATLAB®, dan Dash. Untuk menginstall paket ini di komputer anda, silahkan gunakan pip install plotly melalui environtment Python. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
