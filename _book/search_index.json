[["mini-project.html", "Pertemuan 4 Mini Project 4.1 Impor Data 4.2 Konversi Format File 4.3 Gabungkan Data 4.4 Deskripsi Data 4.5 Verifikasi Kelengkapan Data 4.6 Perbaharui Data 4.7 Periksa Data Duplikat 4.8 Periksa Data Anomali 4.9 Membuat Kolom Baru 4.10 Analisis Outstanding", " Pertemuan 4 Mini Project Adapun beberapa hal yang dipelajari pada program pelatihan Data Analitics With Python pertemuan ke-4 ini adalah sebagai berikut: Penggabungan data menggunakan 3 file dibawah ini: (download data disini). OTS ARAP UPDATE 30092022.XLSX; OTS CURRENT 2022 UPDATE 30092022.XLSX; OTS CURRENT 2022 UPDATE 30092022 PART 2.XLSX) Periksa data duplikat (Nomor connote apakah ada yang double) Periksa data anomali (Memeriksa Data OTS yang nilai nya minus) Data outstanding diurutkan berdasarkan nama customer – Dest Runsheet Analisa nilai outstanding yang tinggi berdasarkan Regional – Cabang – Kurir. Outstanding berdasarkan Kurir / ID Kurir (data kurir dapat dilihat di file ID Kurir.XLSX) 4.1 Impor Data Dalam proses impor (baca) data dari Excel ke Python, beberapa hal yang harus diperhatikan adalah: Pastikan Notebook Python (Koding) anda berada dalam satu folder Buatlah folder baru untuk meyimpan data tersebut (opsional) Nama file excel tidak memuat spasi (gunakan underline _ jika diperlukan). Dalam hal ini, penulis merubah nama variabel menjadi OTS1, OTS2, dan OTS3. impor packages/Library/Module yang diperlukan (dalam hal ini digunakan ‘pandas’) import pandas as pd # library untuk impor data f1 = pd.read_excel(&#39;data/Mini_Project/OTS1.xlsx&#39;) f2 = pd.read_excel(&#39;data/Mini_Project/OTS2.xlsx&#39;) f3 = pd.read_excel(&#39;data/Mini_Project/OTS3.xlsx&#39;) Berikutnya dilakukan pemerikasan struktur data dan informasi dasar pada dataset. f3.info() # print struktur dan informasi dasar Berdasarkan pengamatan yang dilakukan pada ke-3 file dataset di atas, diperoleh beberapa catatan sebagai berikut: Struktur data belum jelas karena nama variabel (kolom) pada file excel tidak ada pada baris pertama Data pada OTS1.xlsx tidak dapat terbaca dengan baik di Python. Langkah penyelesaian permasalahan ini adalah dengan cara Copy-Paste file tersebut ke file excel yang baru dan replace (menimpa) file yang lama. Nama variabel (kolom) pada baris pertama belum sesuai (tidak sama). Banyak kolom tidak sama. Catatan: Jika tidak ingin menghapus baris pertama dari file Excel maka dapat dilakukan dengan parameter skiprows=1. Selain itu, anda juga dapat menggunakan parameter header=2 untuk menunjukan nama variabel ada pada baris ke-2. Terlebih daripada itu, jika anda ingin melewati baris pada indeks 0, 2 dan 5 dapat menggunakan skiprows=[0,2,5] import pandas as pd # library untuk impor data f1 = pd.read_excel(&#39;data/Mini_Project/OTS1.xlsx&#39;,skiprows=1, usecols=&#39;A:I, K&#39;) f2 = pd.read_excel(&#39;data/Mini_Project/OTS2.xlsx&#39;,header=1) f3 = pd.read_excel(&#39;data/Mini_Project/OTS3.xlsx&#39;,header=1) 4.2 Konversi Format File Saat mengerjakan proyek analitik data dengan jumlah pengamatan yang banyak, proses menyimpan dan memuat kembali data ke dalam memori menjadi lebih lambat, dan setiap kali anda melakukan restart pada kernel akan membutuhkan waktu tunggu yang cukup lama. Sehingga, sangat disarankan untuk menyimpan data dengan format terbaik. Menurut Ilia Zaitsev di dalam artikelnya pada laman Towards Data Science file EXCEL atau CSV atau format teks biasa lainnya bukanlah pilihan yang baik. Ini terbukti dari proses loading data pada ke-3 file Excel diatas membutuhkan kurang lebih 3 menit untuk ukuran file 64 Mb. Sehingga, untuk mempercepat proses loading data ini maka dilakukan proses penyimpanan data dengan format feather. # pip install pyarrow` # jangan lupa `install f1.to_feather(&#39;data/Mini_Project/OTS1.ftr&#39;) # data frame f1 ke `OTS1.ftr` f2.to_feather(&#39;data/Mini_Project/OTS2.ftr&#39;) # data frame f2 ke `OTS2.ftr` f3.to_feather(&#39;data/Mini_Project/OTS2.ftr&#39;) # data frame f1 ke `OTS1.ftr` 4.3 Gabungkan Data Setelah meyimpanan data dengan format feather, selanjutnya dilakukan proses penggabungan data. import pandas as pd ftr1=pd.read_feather(&#39;data/Mini_Project/OTS1.ftr&#39;) # impor data ftr2=pd.read_feather(&#39;data/Mini_Project/OTS2.ftr&#39;) # impor data ftr3=pd.read_feather(&#39;data/Mini_Project/OTS2.ftr&#39;) # impor data datagabung = pd.concat([ftr1,ftr2,ftr3],ignore_index=True) # gabungkan semua data datagabung.info() # informasi dasar ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 1312227 entries, 0 to 1312226 ## Data columns (total 10 columns): ## # Column Non-Null Count Dtype ## --- ------ -------------- ----- ## 0 Connote No 1312227 non-null object ## 1 Order Id 1211622 non-null object ## 2 Origin 1312227 non-null object ## 3 Dest Runsheet 1312227 non-null object ## 4 Amount 1312227 non-null int64 ## 5 Project 1312227 non-null object ## 6 POD Status 1312227 non-null object ## 7 Customer Name 1312227 non-null object ## 8 Regional 1312227 non-null object ## 9 OUTSTANDING 1312227 non-null float64 ## dtypes: float64(1), int64(1), object(8) ## memory usage: 100.1+ MB Catatan: Banyaknya observasi (baris) sudah melebihi batas maksimum file Excel 1048576 baris/kolom. 4.4 Deskripsi Data Berikut ini adalah deskripsi dataset yang sedang digunakan: Connote : No Nomor yang diberikan oleh Seller/Penjual berguna untuk melacak sejauh mana proses pengiriman Order Id : No Resi Pengiriman Origin : Asal barang yang akan dikirimkan Dest Runsheet : Tujuan pengiriman Amount : Biaya Pengiriman Project : Jenis Project POD Status : Process On delivery Detail adalah Paket atau barang sedang atau baru saja dikirimkan oleh kurir. Customer Name: Nama Pelanggan Regional : Regional Kategori : Kategori OUTSTANDING : Capaian/Nilai akhir (Verifikasi biaya pengiriman) Catatan: Data gabungan tersebut disimpan dengan format feather, sehingga untuk selanjutnya data ini yang akan di impor pada saat melakukan analisis. datagabung.to_feather(&#39;data/Mini_Project/datagabung.ftr&#39;) # data frame f1 ke `OTS1.ftr` 4.4.1 Quiz 1 Lakukan proses impor data dan memeriksa struktur data dengan format feather! 4.5 Verifikasi Kelengkapan Data Dataset terkadang memuat data yang hilang, bisa saja karena tidak dikumpulkan atau tidak pernah ada. Sehingga, untuk melakukan analisa perlu dilakukan pemeriksaan kelengkapan data terlebih dahulu. df=pd.read_feather(&#39;data/Mini_Project/datagabung.ftr&#39;) # impor data df.isna().sum() # jlh data hilang disetiap kolom ## Connote No 0 ## Order Id 100605 ## Origin 0 ## Dest Runsheet 0 ## Amount 0 ## Project 0 ## POD Status 0 ## Customer Name 0 ## Regional 0 ## OUTSTANDING 0 ## dtype: int64 Berikut ini diperlihatkan cara untuk mengekstrak baris yang berisi setidaknya satu nilai yang hilang: df[df.isna().any(axis=1)] ## Connote No Order Id ... Regional OUTSTANDING ## 962 3012652100730710 None ... BODETABEKCIL 214240.0 ## 1596 JNAC-0015215845 None ... BODETABEKCIL 56650.0 ## 22446 JNER-1000117379 None ... BODETABEKCIL 2199000.0 ## 23125 0100142102776621 None ... JAKARTA 950000.0 ## 23126 0100142102904199 None ... JAKARTA 890000.0 ## ... ... ... ... ... ... ## 218598 JNXB-0001207352 None ... SUMATERA REG. UTARA 27000.0 ## 218599 JNXB-0001207373 None ... SUMATERA REG. UTARA 21000.0 ## 218600 JNXB-0001207895 None ... SUMATERA REG. UTARA 92000.0 ## 218601 JNXB-0001208491 None ... SUMATERA REG. UTARA 213000.0 ## 218602 JNXB-0001208634 None ... SUMATERA REG. UTARA 268524.0 ## ## [100605 rows x 10 columns] Catatan: Data yang hilang tersebut berasal dari file OTS1.xlsx 4.6 Perbaharui Data Berikut ini dilakukan proses penggantian data yang hilang menggunakan nilai dari kolom lain yang besesuaian barisnya. df[&#39;Order Id&#39;] = df[&#39;Order Id&#39;].fillna(value=df[&#39;Connote No&#39;]) df.isna().sum() ## Connote No 0 ## Order Id 0 ## Origin 0 ## Dest Runsheet 0 ## Amount 0 ## Project 0 ## POD Status 0 ## Customer Name 0 ## Regional 0 ## OUTSTANDING 0 ## dtype: int64 4.6.1 Quiz 2 Bagaimana jika anda ingin menggantikan semua nilai pada ‘Order Id’ adalah sama dengan ‘Connote No’? Buatlah script anda menggunakan Python! 4.7 Periksa Data Duplikat Selain identifikasi missing values, kita juga dapat mengidentifikasi adanya data yang duplikat di dataframe Pandas. Anda dapat menggunakan metode berikut untuk menghitung duplikat: df.pivot_table(columns=[&#39;Connote No&#39;], aggfunc=&#39;size&#39;) ## Connote No ## 00001597324367 2 ## 00001774777169 2 ## 00003088381542 2 ## 00003088839431 2 ## 00003088872622 2 ## .. ## Y220929970421965 2 ## Y220929971437980 2 ## Y220929976998741 2 ## Y220929983918700 2 ## Y220929997027189 2 ## Length: 765306, dtype: int64 Berikut ini contoh untuk memperlihatkan data duplikat dalam dataframe berdasarkan kolom Connote No: df[df.duplicated([&#39;Connote No&#39;])] ## Connote No Order Id ... Regional OUTSTANDING ## 219528 3012652200220968 3012652200220968 ... JAWA BARAT 209000.0 ## 527533 1727142200054526 1727142200054526 ... JATIM, BALI &amp; NUSRA 181000.0 ## 528595 2010992200558197 2010992200558197 ... JATIM, BALI &amp; NUSRA 129000.0 ## 528627 2010992200603043 2010992200603043 ... JATIM, BALI &amp; NUSRA 214000.0 ## 528636 2010992200606533 2010992200606533 ... JATIM, BALI &amp; NUSRA 200000.0 ## ... ... ... ... ... ... ## 1312222 5445782200015795 5445782200015795 ... SUMATERA REG. SELATAN 141110.0 ## 1312223 5441602200100864 5441602200100864 ... SUMATERA REG. SELATAN 925970.0 ## 1312224 5441602200101581 5441602200101581 ... SUMATERA REG. SELATAN 323420.0 ## 1312225 5441602200098233 5441602200098233 ... SUMATERA REG. SELATAN 650960.0 ## 1312226 5827522200009960 5827522200009960 ... SUMATERA REG. SELATAN 39000.0 ## ## [546921 rows x 10 columns] Catatan: Dari hasil pemeriksaan data duplikat diatas, diduga kuat bahwa data duplikat tersebut adalah data pengulangan. Olehkarena itu, data duplikat ini dapat dihapuskan. Untuk menghapus data duplikat ini dapat dilakukan dengan cara berikut: df = df.drop_duplicates([&#39;Connote No&#39;], keep=&#39;last&#39;) # hapus data duplikat df.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## Int64Index: 765306 entries, 0 to 1312226 ## Data columns (total 10 columns): ## # Column Non-Null Count Dtype ## --- ------ -------------- ----- ## 0 Connote No 765306 non-null object ## 1 Order Id 765306 non-null object ## 2 Origin 765306 non-null object ## 3 Dest Runsheet 765306 non-null object ## 4 Amount 765306 non-null int64 ## 5 Project 765306 non-null object ## 6 POD Status 765306 non-null object ## 7 Customer Name 765306 non-null object ## 8 Regional 765306 non-null object ## 9 OUTSTANDING 765306 non-null float64 ## dtypes: float64(1), int64(1), object(8) ## memory usage: 64.2+ MB 4.8 Periksa Data Anomali Pemeriksaan data anomali bertujuan untuk menemukan atau menganalisis suatu nilai yang dianggap menyimpangan atau memiliki keanehan yang terjadi atau dengan kata lain tidak seperti biasanya. Berikut ini dilakukan pemerikasaan data anomali dengan statistik deskriptif numerikal. df.describe() ## Amount OUTSTANDING ## count 7.653060e+05 7.653060e+05 ## mean 1.298612e+05 1.297907e+05 ## std 1.994777e+05 1.994349e+05 ## min 0.000000e+00 -1.769078e+06 ## 25% 3.499900e+04 3.499400e+04 ## 50% 7.550000e+04 7.540000e+04 ## 75% 1.690000e+05 1.690000e+05 ## max 1.349100e+07 1.349100e+07 Catatan: Ditemukan bahwa terdapat nilai OUTSTANDING yang negatif. 4.8.1 Quiz 3 Berikut ini diperlihatkan data OUTSTANDING yang bernilai negatif. Lengkapi script dibawah, jika anda ingin memperbaharui nilai pada kolom OUTSTANDING tersebut dengan menggunakan nilai dari kolom Amount. df.loc[df[&#39;OUTSTANDING&#39;] &lt; 0, &#39;OUTSTANDING&#39;] ## 128811 -10000.0 ## 142237 -43610.0 ## 142238 -190610.0 ## 142239 -1769078.0 ## 151009 -3332.0 ## ... ## 189461 -7486.0 ## 207695 -10000.0 ## 209666 -22461.0 ## 211599 -100000.0 ## 943704 -16000.0 ## Name: OUTSTANDING, Length: 62, dtype: float64 Berikut ini diperlihatkan data2 yang memuat nilai negatif tersebut menggunakan fungsi query yang disediakan library pandas. ots_negatif = df.query(&quot;OUTSTANDING &lt; 0&quot;) ots_negatif.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## Int64Index: 62 entries, 128811 to 943704 ## Data columns (total 10 columns): ## # Column Non-Null Count Dtype ## --- ------ -------------- ----- ## 0 Connote No 62 non-null object ## 1 Order Id 62 non-null object ## 2 Origin 62 non-null object ## 3 Dest Runsheet 62 non-null object ## 4 Amount 62 non-null int64 ## 5 Project 62 non-null object ## 6 POD Status 62 non-null object ## 7 Customer Name 62 non-null object ## 8 Regional 62 non-null object ## 9 OUTSTANDING 62 non-null float64 ## dtypes: float64(1), int64(1), object(8) ## memory usage: 5.3+ KB Untuk mengurutkan data OUTSTANDING negatif yang paling besar ke paling kecil dapat digunakan script berikut: ots_negatif.sort_values(&#39;OUTSTANDING&#39;, ascending=True) ## Connote No Order Id ... Regional OUTSTANDING ## 142239 CGKEC30636014422 CGKEC30636014422 ... KALIMANTAN -1769078.0 ## 166174 2111801900093819 2111801900093819 ... SULAMPAPUA -1016380.0 ## 166024 2111801900063390 2111801900063390 ... SULAMPAPUA -985520.0 ## 166061 2111801900071252 2111801900071252 ... SULAMPAPUA -752000.0 ## 166205 2111801900099410 2111801900099410 ... SULAMPAPUA -446020.0 ## ... ... ... ... ... ... ## 187612 JNRP-0013069369 JNRP-0013069369 ... SULAMPAPUA -666.0 ## 168585 2901961800115130 2901961800115130 ... SULAMPAPUA -500.0 ## 166111 2111801900079131 2111801900079131 ... SULAMPAPUA -500.0 ## 178266 JNCB-0300665670 JNCB-0300665670 ... SULAMPAPUA -142.0 ## 187277 JNRP-0011633455 JNRP-0011633455 ... SULAMPAPUA -110.0 ## ## [62 rows x 10 columns] 4.8.2 Quiz 4 Perhatikan script dibawah ini, kemudian lakukan pembaharuan data OUTSTANDING yang bernilai negatif tersebut menjadi satu dataframe baru. Gunakan gunakan pd.DataFrame(). ots_negatif = df.query(&quot;OUTSTANDING &lt; 0&quot;) Berikut ini dilakukan pemerikasaan data anomali dengan statistik deskriptif kategorikal. ots_negatif = df.query(&quot;OUTSTANDING &lt; 0&quot;) Berikut ini dilakukan pemerikasaan data anomali dengan statistik deskriptif kategorikal. kategori = df.select_dtypes(include=&#39;object&#39;) # pilih data kategori kategori.describe().transpose() # deskriptif kategorical ## count unique top freq ## Connote No 765306 765306 0100792200104454 1 ## Order Id 765306 765202 0226472200012531 62 ## Origin 765306 60 CGK 207272 ## Dest Runsheet 765306 62 SUB 92738 ## Project 765306 5 COD CORPORATE 679957 ## POD Status 765306 15 D01 687463 ## Customer Name 765306 2647 LAZADA MPDS COD 551355 ## Regional 765306 9 JATIM, BALI &amp; NUSRA 218953 4.8.3 Quiz 5 Berikan pendapat (temuan) anda mengenai statistik deskriptif kategorikal diatas! 4.9 Membuat Kolom Baru Dalam analisis data terkadang kita perlu membuat kolom baru untuk menampung informasi yang lebih detail yang dapat membantu kita melihat lebih jauh tentang data yang sedang kita observasi. Untuk itu, pada tulisan ini, saya akan membahas cara menambahkan kolom baru pada dataframe pandas. Berikut ini dilakukan penambahan kolom baru untuk melihat Selisih nilai antara kolom Amount dan OUTSTANDING. df[&#39;Selisih&#39;] = (df[&#39;OUTSTANDING&#39;]-df[&#39;Amount&#39;]) 4.9.1 Quiz 6 Dataframe diatas sudah memiliki kolom Selisih nilai dari kolom Amount dan OUTSTANDING. Bagaimana jika anda diminta untuk memperlihatkan nilai selisih yang lebih besar dan lebih kecil dari nol? tunjukan script dan hasilnya! 4.10 Analisis Outstanding 4.10.1 Regional Berikut ini adalah Analisa nilai outstanding yang berdasarkan Regional: # Tabel Pivot ots=pd.pivot_table(df,index=[&#39;Regional&#39;], values=[&#39;OUTSTANDING&#39;], aggfunc=&#39;sum&#39;) # Komfersi indeks menjadi Kolom ots.reset_index(inplace=True) # Urutkan data dari yang besar ke kecil ots=ots.sort_values([&#39;OUTSTANDING&#39;],ascending=False).head(100) # Konversi Total omset menjadi per-juta ots[&quot;OUTSTANDING&quot;] = (ots[&#39;OUTSTANDING&#39;]/1000000) ots ## Regional OUTSTANDING ## 2 JATIM, BALI &amp; NUSRA 24036.152920 ## 6 SULAMPAPUA 19062.006514 ## 5 KALIMANTAN 10212.505786 ## 0 BODETABEKCIL 9379.149909 ## 8 SUMATERA REG. UTARA 9177.094226 ## 7 SUMATERA REG. SELATAN 9070.247045 ## 3 JAWA BARAT 8690.865457 ## 4 JAWA TENGAH &amp; DIY 7843.426443 ## 1 JAKARTA 1858.182450 # impor library yg dibutuhkan untuk visualisasi import plotly.express as px # membuat grafik batang (bar-chart) fig = px.bar(ots, y=&#39;OUTSTANDING&#39;, x=&#39;Regional&#39;,color=&#39;Regional&#39;, text_auto=&#39;.2s&#39;) # Pengaturan detail grafik fig.update_layout(barmode=&#39;stack&#39;, width=800, height=600, showlegend=False, title=&quot;Total OTS Berdasarkan Regional&quot;, xaxis_title=&quot;Regional&quot;, yaxis_title=&quot;Per-miliar (Rp)&quot;); # Pengaturan rotasi axis x (+-360 derajat) fig.update_xaxes(tickangle=-45, showticklabels=True); # Pengaturan posisi, ukuran, dan rotasi teks fig.update_traces(textfont_size=12, textangle=0, textposition=&quot;outside&quot;); fig.show() 4.10.2 Pelanggan &amp; Tujuan Berikut ini dperlihatkan pencapaian (outstanding) yang diurutkan berdasarkan nama customer ~ Dest Runsheet. # Tabel Pivot ots=pd.pivot_table(df,index=[&#39;Customer Name&#39;,&#39;Dest Runsheet&#39;], values=[&#39;OUTSTANDING&#39;], aggfunc=&#39;sum&#39;) # Komfersi indeks menjadi Kolom ots.reset_index(inplace=True) # Urutkan data dari yang besar ke kecil ots=ots.sort_values([&#39;OUTSTANDING&#39;],ascending=False).head(100) # Konversi Total omset menjadi per-juta ots[&quot;OUTSTANDING&quot;] = (ots[&#39;OUTSTANDING&#39;]/1000000) ots ## Customer Name Dest Runsheet OUTSTANDING ## 8978 LAZADA MPDS COD SUB 6638.606005 ## 8980 LAZADA MPDS COD TGR 3699.967101 ## 8930 LAZADA MPDS COD BDO 3036.068315 ## 8953 LAZADA MPDS COD KOE 2943.961754 ## 8959 LAZADA MPDS COD MJK 2450.080273 ## ... ... ... ... ## 11150 ORDIVO TEKNOLOGY BTJ 150.349723 ## 9770 MENGANTAR KARYA BANGSA PT / COD CGK 143.056835 ## 9807 MENGANTAR KARYA BANGSA PT / COD SOQ 142.298665 ## 13998 SICEPAT EKSPRES INDONESIA / COD MDC 141.480843 ## 9759 MENGANTAR KARYA BANGSA PT / COD AMQ 140.652186 ## ## [100 rows x 3 columns] Untuk menganalisis secara visual, dapat diperlihatkan dengan menggunakan Bar-Chart sebagai berikut: # impor library yg dibutuhkan untuk visualisasi import plotly.express as px # membuat grafik batang (bar-chart) fig = px.bar(ots, y=&#39;Dest Runsheet&#39;, x=&#39;OUTSTANDING&#39;,color=&#39;Customer Name&#39;, text_auto=&#39;.2s&#39;) # Pengaturan detail grafik fig.update_layout(barmode=&#39;stack&#39;, width=1000, height=600, showlegend=True, title=&quot;Total OTS Berdasarkan Tujuan Pengiriman&quot;, xaxis_title=&quot;Per-miliar (Rp)&quot;, yaxis_title=&quot;Tujuan Pengiriman&quot;); # Pengaturan rotasi axis x (+-360 derajat) fig.update_xaxes(tickangle=0, showticklabels=False); # Pengaturan posisi, ukuran, dan rotasi teks fig.update_traces(textfont_size=12, textangle=0, textposition=&quot;outside&quot;); fig.show() 4.10.3 Quiz 7 Buatlah Analisa nilai outstanding yang berdasarkan Dest Runsheet dan POD Status 4.10.4 Quiz 8 Buatlah Analisa nilai outstanding yang berdasarkan Origin dan Dest Runsheet 4.10.5 Projek Berikut ini diperlihatkan analisis Outstanding berdasarkan persentase Project: # Tabel Pivot untuk menghitung jumlah omzet berdasarkan Region df=pd.pivot_table(df,index=[&#39;Project&#39;], values=[&#39;OUTSTANDING&#39;], aggfunc=&#39;sum&#39;) # Komfersi indeks menjadi Kolom df.reset_index(inplace=True) # Konversi Total omset menjadi per-miliar df[&quot;OUTSTANDING&quot;] = (df[&#39;OUTSTANDING&#39;]/1000000000) import plotly.express as px # membuat grafik lingkaran (pie-chart) fig = px.pie(df, values=&#39;OUTSTANDING&#39;, names=&#39;Project&#39;, hole=0.5) # Pengaturan detail grafik fig.update_layout(showlegend=True, autosize=False, width=800, height=600, title=&quot;Total Outstanding berdasarkan persentase `Project`&quot;); fig.update_traces(textposition=&#39;outside&#39;, textinfo=&#39;percent+label&#39;); fig.show() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
